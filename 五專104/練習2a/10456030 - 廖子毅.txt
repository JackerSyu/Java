(1)
字串的長度是至少為2.
例如:
a5322121a  (正確)
a          (不正確)

class Main {
    public static void main(String[] args) {
        String i1="a5322121a";
        String i2="a";
         
         if(i1.length()>=2){
           System.out.println("正確");
           
         }else{
           System.out.println("不正確");
         }
         if(i2.length()>=2){
           System.out.println("正確");
           
         }else{
           System.out.println("不正確");
         }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   *(3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   => 寫一個程式, 執行2次, 測試2個不同資料.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


----------------------------------------------------------
(2)
字串的長度是至少為2, 而且(第1碼)與(最後1碼)相同.
例如:
a5322121a  (正確)
a12321b    (不正確)

class Main {
    public static void main(String[] args) {
        String i1="a5322121a";
        String i2="a12321b";
         
         if(i1.length()>=2){
           if(i1.charAt(0)==i1.charAt(i1.length()-1)){
             System.out.println("正確");
           }else{
             System.out.println("不正確");
           }
         }else {
           System.out.println("不正確");
         }
           
       if(i2.length()>=2){
           if(i2.charAt(0)==i2.charAt(i2.length()-1)){
             System.out.println("正確");
           }else{
             System.out.println("不正確");
           }
         }else {
           System.out.println("不正確");
         }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   *(3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
      => 寫一個程式, 執行2次, 測試2個不同資料.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


---------------------------------------------------------
(3)
字串的長度是5~10位, 而且每一碼都相同.
例如:
aaaaaa  (正確)
ccccccc (正確)
111     (不正確)
123123  (不正確)

class Main {
    public static void main(String[] args) {
        String s1="aaaaaa";
        String s2="ccccccc";
        String s3="111";
        String s4="123123";
        int flag=0;
        int flag3=0;
         
         if(s1.length()>=5 && s1.length()<=10){
           for(int i=1;i<s1.length();i++){
             if(s1.charAt(i-1)==s1.charAt(i)){
               flag=flag+1;
             }else{
               flag=flag-1;
             }
           }
           if(flag == 5){
             System.out.println("正確");
           }else {
           System.out.println("不正確");
         }
         }else {
           System.out.println("不正確");
         }
           
       if(s3.length()>=5 && s3.length()<=10){
           for(int i=1;i<s1.length();i++){
             if(s3.charAt(i-1)==s3.charAt(i)){
               flag3=flag3+1;
             }else{
               flag3=flag3-1;
             }
           }
           if(flag == s3.length()){
             System.out.println("正確");
           }else {
           System.out.println("不正確");
         }
         }else {
           System.out.println("不正確");
         }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   *(3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   if(flag == 5){
   => ?
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


---------------------------------------------------------
(4)
字串長度為奇數, 內容只能有數字.
例如:
54345   (正確)
42*a2   (不正確)
1234    (不正確)
1421    (不正確)


class Main {
    public static void main(String[] args) {
        String s="54345";
        boolean flag=true;
        if (s.length()%2==0){
          for (int i=0; i<s.length() ; i++){
            char c = s.charAt(i);
          
            if(c >'9' || c<'0'){
              flag = false;
            }else{
              flag = true;
            }
          }
        }else{
          flag =false;
        }
        System.out.println(flag);    
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


---------------------------------------------------------
(5)
字串長度至少為5, 內容只能有數字及小數點.
字串內容可以沒有小數點, 但如果內容有小數點, 只能有1個, 而且小數點之後一定要有其他數字.
例如:
54221     (正確)
543.1     (正確)
5321.     (不正確)
5.3.1     (不正確)



class Main {
    public static void main(String[] args) {
        String s="4534341";
        boolean flag=true;
        
        if (s.length()>=5){
          for (int i=0; i<s.length() ; i++){
            char c = s.charAt(i);
          
            if(c >'9' && c <'0'){
              flag = false;
            }else if(s.charAt(s.length())){
              flag = false;
            }
          }
        }else{
          flag =false;
        }
        System.out.println(flag);    
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
*(2)程式執行結果有誤.
if(s.charAt(s.length()))
=> ?
但如果內容有小數點, 只能有1個,
=> ?
(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================