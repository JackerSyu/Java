=================================
練習02a 字串的處理
=================================
測試以下的字串是否符合條件:

(1)
字串的長度是至少為2.
例如:
a5322121a  (正確)
a          (不正確)
class Main {
    public static void main(String[] args) {
        String str="a5322121a";
        
        int len=str.length();
        
        if(len >= 2){
          System.out.println("通過");
        }else{
          System.out.println("有誤");
        }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.
=> s.length()可不存在變數中, 直接使用.
=> 如: if(s.length()...)   
=======================================================================================


(2)
字串的長度是至少為2, 而且(第1碼)與(最後1碼)相同.
例如:
a5322121a  (正確)
a12321b    (不正確)
class Main {
    public static void main(String[] args) {
        String str="a5322121a";
        
        int len=str.length();
        
        if(len >= 2){
          if(str.charAt(0) == str.charAt(len-1)){
            System.out.println("通過");
          }else{
            System.out.println("有誤, 第1碼與最後1碼不相同");
          }
        }else{
          System.out.println("有誤, 字串長度小於2");
        }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


(3)
字串的長度是5~10位, 而且每一碼都相同.
例如:
aaaaaa  (正確)
ccccccc (正確)
111     (不正確)
123123  (不正確)
class Main {
    public static void main(String[] args) {
        String str="aaabaa";
        boolean correct=true;
        
        int len=str.length();
        
        if(len >= 5 && len <= 10){
          for (int i=1;i<len;i++){
            if(str.charAt(i-1) != str.charAt(i)){
              correct=false;
              break;
            }
          }
          
          if(correct == true){
            System.out.println("通過");
          }else{
            System.out.println("有誤");
          }
        }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
*(2)程式執行結果有誤.
String str="aaa";
=> ?
(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.
if(flag==true){
=> if(flag)   
=======================================================================================



(4)
字串長度為奇數, 內容只能有數字.
例如:
54345   (正確)
42*a2   (不正確)
1234    (不正確)
1421    (不正確)
方法一
--------------------------------------------------
class Main {
    public static void main(String[] args) {
        String str="12345678901234567";
        
        int len=str.length();
        
        if(len%2 == 1){
          try{
            long num=Long.valueOf(str).longValue();
            
            System.out.println("通過");
          }catch(Exception e){
            System.out.println("資料輸入錯誤");
            return;
          }
        }else{
          System.out.println("資料長度不為基數");
        }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
*(2)程式執行結果有誤.
String str="1234567890123456789012345678901";
=> ?
(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


方法二
--------------------------------------------------
class Main {
    public static void main(String[] args) {
        String s="123562";
        boolean flag=true;
        
        int cnt=s.length();
        
        if(cnt%2 == 1){
          for(int i=0; i<cnt; i++){
            if(!(s.charAt(i) >= '0' && s.charAt(i)<= '9')){
              flag=false;
              break;
            }
          }
        }else{
          flag=false;
        }
        
        if(flag){
          System.out.println("通過");
        }else{
          System.out.println("不通過");
        }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


(5)
字串長度至少為5, 內容只能有數字及小數點.
字串內容可以沒有小數點, 但如果內容有小數點, 只能有1個, 而且小數點之後一定要有其他數字.
例如:
54221     (正確)
543.1     (正確)
5321.     (不正確)
5.3.1     (不正確)
方法一
--------------------------------------------------
class Main {
    public static void main(String[] args) {
        String str="1133456.";
        int cnt=0;
        boolean flag=false;
        
        int len=str.length();
        
        for(int i=0; i<len; i++){
          if(str.charAt(i) == '.'){
            cnt += 1;
          }
        }
        
        if(len >= 5 && cnt <= 1){
          for(int i=0; i<len; i++){
            if(i<'0' || i>'9' || i=='.'){
              flag=true;
            }
          }
          
          if(str.charAt(len-1) < '0' || str.charAt(len-1) > '9'){
            flag = false;
          }
        }else{
          flag = false;
        }
        
        if(flag){
          System.out.println("通過");
        }else{
          System.out.println("資料輸入錯誤");
        }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
*(2)程式執行結果有誤.
String str="1133a456.0";
=> ?
(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


方法二
--------------------------------------------------
class Main {
    public static void main(String[] args) {
        String str="113123456...33";
        int cnt=0;
        boolean flag=false;
        
        int len=str.length();
        
        for(int i=0; i<len; i++){
          if(str.charAt(i) == '.'){
            cnt += 1;
          }
        }
        
        if(len >= 5 && cnt <= 1){
          try{
            double num=Double.valueOf(str).doubleValue();
            flag=true;
          }catch(Exception e){
            flag=false;
            return;
          }
        }else{
          flag=false;
        }
        
        if(str.charAt(len-1) < '0' || str.charAt(len-1) > '9'){
            flag = false;
          }
        
        if(flag){
          System.out.println("通過");
        }else{
          System.out.println("資料輸入錯誤");
        }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
*(2)程式執行結果有誤.
String str="+1131.0";
=> ?
(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================