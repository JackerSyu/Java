=================================
練習02a 字串的處理
=================================
測試以下的字串是否符合條件:

(1)
字串的長度是至少為2.
例如:
a5322121a  (正確)
a          (不正確)
-----------------------------------------------
class Main {
    public static void main(String[] args) {
        String s="mv";
        int len=s.length();
        
        if(len<2){
           System.out.println("不正確");
        }else{
           System.out.println("正確");
        }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)程式可以執行, 但請注意以下的問題.
   (3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.
   => 
class Main {
    public static void main(String[] args) {
        String s="mv";
		
        int len=s.length();        
        if(len<2){
           System.out.println("不正確");
        }else{
           System.out.println("正確");
        }
    }
}   
=======================================================================================


(2)
字串的長度是至少為2, 而且(第1碼)與(最後1碼)相同.
例如:
a5322121a  (正確)
a12321b    (不正確)
----------------------------------------------
class Main {
    public static void main(String[] args) {
        String s="mvm";
        int len=s.length();
        char first=s.charAt(0);
        char end=s.charAt(len-1);
        
        if(len<2){
           System.out.println("不正確");
        }else if(first == end){
           System.out.println("正確");
        }else{
           System.out.println("不正確");
        }
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)程式可以執行, 但請注意以下的問題.
   (3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.
   =>
class Main {
    public static void main(String[] args) {
        String s="mvm";
		
        int len=s.length();
        char first=s.charAt(0);
        char end=s.charAt(len-1);
        
        if(len<2){
           System.out.println("不正確");
        }else if(first == end){
           System.out.println("正確");
        }else{
           System.out.println("不正確");
        }
    }
}   
=======================================================================================


(3)
字串的長度是5~10位, 而且每一碼都相同.
例如:
aaaaaa  (正確)
ccccccc (正確)
111     (不正確)
123123  (不正確)
--------------------------------------------
class Main {
    public static void main(String[] args) {
        String s="111111";
        int len=s.length();
        boolean flag=true;
        
        if(len<5 || len>10){
           flag=false;
        }
        
        for(int i=0;i<len-1;i++){
           char c1=s.charAt(i);
           char c2=s.charAt(i+1);
           
           if(c1 != c2){
             flag=false;
           }
        }
        System.out.println(flag);
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)程式可以執行, 但請注意以下的問題.
   (3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.
   =>
class Main {
    public static void main(String[] args) {
        String s="111111";       
        boolean flag=true;
        
        if(len<5 || len>10){
           flag=false;
        }
        
		int len=s.length();
        for(int i=0;i<len-1;i++){
           char c1=s.charAt(i);
           char c2=s.charAt(i+1);
           
           if(c1 != c2){
             flag=false;
           }
        }
        System.out.println(flag);
    }
}   
=======================================================================================


(4)
字串長度為奇數, 內容只能有數字.
例如:
54345   (正確)
42*a2   (不正確)
1234    (不正確)
1421    (不正確)
----------------------------------------------
class Main {
    public static void main(String[] args) {
        String s="1a1";
        int len=s.length();
        boolean flag=true;
        int mod=len%2;
        
          for(int i=0;i<len;i++){
          char c1=s.charAt(i);
           
             if(c1>'9' || c1<'0'){
             flag=false;
             }
          }
          if(mod==0){
           flag=false;
          }   
      System.out.println(flag);
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
(2)程式執行結果有誤.
*(3)程式可以執行, 但請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   *(3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   int mod=len%2;
   => int remainder=len%2;
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議. 
=======================================================================================


(5)
字串長度至少為5, 內容只能有數字及小數點.
字串內容可以沒有小數點, 但如果內容有小數點, 只能有1個, 而且小數點之後一定要有其他數字.
例如:
54221     (正確)
543.1     (正確)
5321.     (不正確)
5.3.1     (不正確)
---------------------------------------------
class Main {
    public static void main(String[] args) {
        String s="1.3.99";
        boolean flag=true;
        int cntd=0;
        
        for(int i=0; i<s.length(); i++){
            char c= s.charAt(i); 
            
            if(s.length()<5){
               flag=false;
            }
            if(c == '.'){
               cntd++;
            }
            if(cntd==1){
               flag=true;
            }
            if(c>'9' || c<'0'){
               flag=false;
            }
            
            String last= s.substring(s.length()-1, s.length());
            if(last.equals(".")){
               flag=false;
            }
             
        }
        System.out.println(flag);
    }
}
=======================================================================================
(1)沒有問題, 是一個好程式.
*(2)程式執行結果有誤.
	測試1.99 
	=> true ?
(3)程式可以執行, 但請注意以下的問題.
   (3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.     
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.    
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================