=================================
J23
=================================

(1)
class MyThread extends Thread {
    private String name;

    public MyThread(String name){
        this.name=name;
    }

    //改寫執行緒的執行內容
    @Override
    public void run() { 
        for(int i=0; i<1000; i++){
            System.out.println(name + ":" + i);
        }   
    }
}    

class Main{
    public static void main(String[] argv) {
        MyThread t1=new MyThread("小白");
        MyThread t2=new MyThread("小黑");

        //啟動執行緒
        t1.start();
        t2.start();
    }
}


(2)
class MyThread implements Runnable {
    private String name;

    public MyThread(String name){
        this.name=name;
    }

    //改寫執行緒的執行內容
    @Override
    public void run() { 
        for(int i=0; i<1000; i++){
            System.out.println(name + ":" + i);
        }   
    }
}    

class Main{
    public static void main(String[] argv) {
        MyThread t1=new MyThread("小白");
        MyThread t2=new MyThread("小黑");

        //啟動執行緒
        t1.run();
        t2.run();
    }
}


(3)
//一個類以抽號碼牌的類別
class Counter{
    private static int cnt=0;

    //每執行一次, 靜態變數cnt的內容累加
    public static void count(){
        int i=Counter.cnt;
        i++;
        System.out.println("counter=" + i);
        Counter.cnt=i;
    }
}

class MyThread extends Thread {
    private String name;

    public MyThread(String name){
        this.name=name;
    }

    //改寫執行緒的執行內容
    @Override
    public void run() { 
        for(int i=0; i<500; i++){
            System.out.println(name + ":" + i);
            Counter.count();
        }   
    }
}    

class Main{
    public static void main(String[] argv) {
        MyThread t1=new MyThread("小白");
        MyThread t2=new MyThread("小黑");

        //啟動執行緒
        t1.start();
        t2.start();
    }
}


(4)
class Counter{
    private static int cnt=0;

    //此方法以 synchronized 修飾, 表示同一時間只有一個執行緒可進入執行. 
    public synchronized static void count(){
        int i=Counter.cnt;
        i++;
        System.out.println("counter=" + i);
        Counter.cnt=i;
    }
}

class MyThread extends Thread {
    private String name;

    public MyThread(String name){
        this.name=name;
    }

    @Override
    public void run() { 
        for(int i=0; i<500; i++){
            System.out.println(name + ":" + i);
            Counter.count();
        }   
    }
}  

class Main{
    public static void main(String[] argv) {
        MyThread t1=new MyThread("小白");
        MyThread t2=new MyThread("小黑");

        t1.start();
        t2.start();
    }
}


(5)
class Counter{
    private  int cnt=0;

    public void count(){
        int i;

        //程式同步區域
        synchronized(this){
            i=cnt;
            i++;
            cnt=i;
        }

        System.out.println("counter=" + i);     
    }
}

class MyThread extends Thread {
    private String name;
    private Counter counter;

    public MyThread(String name, Counter counter){
        this.name=name;
        this.counter=counter;
    }   

    @Override
    public void run() { 
        for(int i=0; i<500; i++){
            System.out.println(name + ":" + i);
            counter.count();
        }   
    }
}    

class Main{
    public static void main(String[] argv) {
        Counter counter=new Counter();

        //兩個執行緒取用同一個 counter 物件    
        MyThread t1=new MyThread("小白", counter);
        MyThread t2=new MyThread("小黑", counter);        

        t1.start();
        t2.start();
    }
}
