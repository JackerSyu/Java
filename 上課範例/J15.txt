(1)
****************************************
*  1個父類別 與 1個子類別            
****************************************

import java.util.*;

//---------------------------------------------------------------------------------
//「員工」類別
class Employee{
    private String empNo;    //員工編號
    private String empName;  //姓名
    private char rank;       //職級
	
    //建構元(1)
    public Employee(String empNo, String empName, char rank){
        setEmpNo(empNo);
        setEmpName(empName);
        setRank(rank);
    }
	
    //建構元(2)
    public Employee(){
        empNo=null;
        empName=null;
        rank='\u0000';
    }		
	
    //設定成員值, setter
    public void setEmpNo(String empNo){this.empNo=empNo;}
    public void setEmpName(String empName){this.empName=empName;}
    public void setRank(char rank){this.rank=rank;}
	
    //取出成員值, getter
    public String getEmpNo(){return empNo;}
    public String getEmpName(){return empName;}
    public char getRank(){return rank;}
}


//---------------------------------------------------------------------------------
//「全職員工」繼承「員工」
class FullTimeEmployee extends Employee{
    private int saleTotal;  //月銷售額
	
    //建構元(1)	
    public FullTimeEmployee(String empNo, String empName, char rank, int saleTotal){
        super(empNo, empName, rank);
        setSaleTotal(saleTotal);
    }
	
    //建構元(2)
    public FullTimeEmployee(){
        super();
        this.saleTotal=0;
    }
	
    //設定成員值, setter
    public void setSaleTotal(int saleTotal){this.saleTotal=saleTotal;}
	
    //取出成員值, getter
    public int getSaleTotal(){return saleTotal;}
	
    //全職員工計算薪水的方法
    public int salary(){
        int base=0;         //底薪
        int commission=0;   //傭金
		
        switch(super.getRank()){
            case 'A':
                base=40000;
                commission=(int)(saleTotal*0.05);
                break;
            case 'B':
                base=35000;
                commission=(int)(saleTotal*0.04);
                break;
            case 'C':
                base=30000;
                commission=(int)(saleTotal*0.03);
                break;
            default:
                base=25000;
                commission=(int)(saleTotal*0.02);
        }
		
        return (base + commission);
    }
}


//---------------------------------------------------------------------------------
class Main {
    public static void main(String[] args) {
        //將多個「全職員工」物件加入串列清單中
        ArrayList arrayList = new ArrayList();
        
        arrayList.add(new FullTimeEmployee("A001", "陳小昱", 'A', 450000));
        arrayList.add(new FullTimeEmployee("A002", "李小閱", 'A', 480000));
        arrayList.add(new FullTimeEmployee("A003", "廖小昂", 'B', 350000));
        arrayList.add(new FullTimeEmployee("A004", "謝小齊", 'B', 370000));
        arrayList.add(new FullTimeEmployee("A005", "藍小謙", 'C', 360000)); 

        for(int i=0; i<arrayList.size(); i++){
            printEmployee((FullTimeEmployee)arrayList.get(i));
        }
    }
	
    //印出員工資料
    public static void printEmployee(FullTimeEmployee emp){
        System.out.println("員工編號:" + emp.getEmpNo());  
        System.out.println("員工姓名:" + emp.getEmpName());  
        System.out.println("職級:" + emp.getRank());  
        System.out.println("月銷售額:" + emp.getSaleTotal());
        System.out.println("薪水:" + emp.salary());	
        System.out.println("-----------------------");
    }
}




(2)
****************************************
*  1個父類別 與 2個子類別           
****************************************

import java.util.*;

//---------------------------------------------------------------------------------
//「員工」類別
class Employee{
    private String empNo;    //員工編號
    private String empName;  //姓名
    private char rank;       //職級
	
    //建構元(1)
    public Employee(String empNo, String empName, char rank){
        setEmpNo(empNo);
        setEmpName(empName);
        setRank(rank);
    }
	
    //建構元(2)
    public Employee(){
        empNo=null;
        empName=null;
        rank='\u0000';
    }		
	
    //設定成員值, setter
    public void setEmpNo(String empNo){this.empNo=empNo;}
    public void setEmpName(String empName){this.empName=empName;}
    public void setRank(char rank){this.rank=rank;}
	
    //取出成員值, getter
    public String getEmpNo(){return empNo;}
    public String getEmpName(){return empName;}
    public char getRank(){return rank;}
}


//---------------------------------------------------------------------------------
//「全職員工」繼承「員工」
class FullTimeEmployee extends Employee{
    private int saleTotal;  //月銷售額
	
    //建構元(1)	
    public FullTimeEmployee(String empNo, String empName, char rank, int saleTotal){
        super(empNo, empName, rank);
        setSaleTotal(saleTotal);
    }
	
    //建構元(2)
    public FullTimeEmployee(){
        super();
        this.saleTotal=0;
    }
	
    //設定成員值, setter
    public void setSaleTotal(int saleTotal){this.saleTotal=saleTotal;}
	
    //取出成員值, getter
    public int getSaleTotal(){return saleTotal;}
	
    //全職員工計算薪水的方法
    public int salary(){
        int base=0;         //底薪
        int commission=0;   //傭金
		
        switch(super.getRank()){
            case 'A':
                base=40000;
                commission=(int)(saleTotal*0.05);
                break;
            case 'B':
                base=35000;
                commission=(int)(saleTotal*0.04);
                break;
            case 'C':
                base=30000;
                commission=(int)(saleTotal*0.03);
                break;
            default:
                base=25000;
                commission=(int)(saleTotal*0.02);
        }
		
        return (base + commission);
    }
}


//---------------------------------------------------------------------------------
//「兼職員工」繼承「員工」
class PartTimeEmployee extends Employee{
    private int hours;  //兼職時數
	
    //建構元(1)	
    public PartTimeEmployee(String empNo, String empName, char rank, int hours){
        super(empNo, empName, rank);
        setHours(hours);
    }
	
    //建構元(2)
    public PartTimeEmployee(){
        super();
        this.hours=0;
    }
	
    //設定成員值, setter
    public void setHours(int hours){this.hours=hours;}
	
    //取出成員值, getter
    public int getHours(){return hours;}
	
    //兼職員工計算薪水的方法
    public int salary(){		
        return (hours*200);
    }
}


//---------------------------------------------------------------------------------
class Main{
    public static void main(String[] args) {
        //將多個「全職員工」物件加入串列清單中
        ArrayList fullTime = new ArrayList();
        
        fullTime.add(new FullTimeEmployee("A001", "陳小昱", 'A', 450000));
        fullTime.add(new FullTimeEmployee("A002", "李小閱", 'A', 480000));
        fullTime.add(new FullTimeEmployee("A003", "廖小昂", 'B', 350000));
        fullTime.add(new FullTimeEmployee("A004", "謝小齊", 'B', 370000));
        fullTime.add(new FullTimeEmployee("A005", "藍小謙", 'C', 360000)); 

        for(int i=0; i<fullTime.size(); i++){
            printFullTime((FullTimeEmployee)fullTime.get(i));
        }
		
        //將多個「兼職員工」物件加入串列清單中
        ArrayList partTime = new ArrayList();
        
        partTime.add(new PartTimeEmployee("B001", "王小宇", 'A', 120));
        partTime.add(new PartTimeEmployee("B002", "侯小庭", 'A', 185));
        partTime.add(new PartTimeEmployee("B003", "許小蘭", 'A', 90));
        partTime.add(new PartTimeEmployee("B004", "石小夫", 'B', 125));
        partTime.add(new PartTimeEmployee("B005", "陳小瑞", 'C', 160)); 

        for(int i=0; i<partTime.size(); i++){
            printPartTime((PartTimeEmployee)partTime.get(i));
        }
    }
	
    //印出全職員工資料
    public static void printFullTime(FullTimeEmployee emp){
        System.out.println("員工編號:" + emp.getEmpNo());  
        System.out.println("員工姓名:" + emp.getEmpName()); 
        System.out.println("薪水:" + emp.salary());	
        System.out.println("-----------------------");
    }
	
    //印出兼職員工資料
    public static void printPartTime(PartTimeEmployee emp){
        System.out.println("員工編號:" + emp.getEmpNo());  
        System.out.println("員工姓名:" + emp.getEmpName()); 
        System.out.println("薪水:" + emp.salary());	
        System.out.println("-----------------------");
    }
}




(3)
***************************************
*  1個父類別 與 2個子類別               
*  父類別是抽象類別                     
*  使用多型的技巧列印資料               
***************************************
import java.util.*;

//---------------------------------------------------------------------------------
//「員工」的抽象類別(有一個未完成的方法)
abstract class Employee{
    private String empNo;    //員工編號
    private String empName;  //姓名
    private char rank;       //職級
	
    //建構元(1)
    public Employee(String empNo, String empName, char rank){
        setEmpNo(empNo);
        setEmpName(empName);
        setRank(rank);
    }
	
    //建構元(2)
    public Employee(){
        empNo=null;
        empName=null;
        rank='\u0000';
    }		
	
    //設定成員值, setter
    public void setEmpNo(String empNo){this.empNo=empNo;}
    public void setEmpName(String empName){this.empName=empName;}
    public void setRank(char rank){this.rank=rank;}
	
    //取出成員值, getter
    public String getEmpNo(){return empNo;}
    public String getEmpName(){return empName;}
    public char getRank(){return rank;}
    
    //抽象方法
    abstract public int salary();
}


//---------------------------------------------------------------------------------
//「全職員工」繼承「員工」
class FullTimeEmployee extends Employee{
    private int saleTotal;  //月銷售額
	
    //建構元(1)	
    public FullTimeEmployee(String empNo, String empName, char rank, int saleTotal){
        super(empNo, empName, rank);
        setSaleTotal(saleTotal);
    }
	
    //建構元(2)
    public FullTimeEmployee(){
        super();
        this.saleTotal=0;
    }
	
    //設定成員值, setter
    public void setSaleTotal(int saleTotal){this.saleTotal=saleTotal;}
	
    //取出成員值, getter
    public int getSaleTotal(){return saleTotal;}
	
    //全職員工計算薪水的方法, 實作父親的抽象方法
    @Override    
    public int salary(){
        int base=0;         //底薪
        int commission=0;   //傭金
		
        switch(super.getRank()){
            case 'A':
                base=40000;
                commission=(int)(saleTotal*0.05);
                break;
            case 'B':
                base=35000;
                commission=(int)(saleTotal*0.04);
                break;
            case 'C':
                base=30000;
                commission=(int)(saleTotal*0.03);
                break;
            default:
                base=25000;
                commission=(int)(saleTotal*0.02);
        }
		
        return (base + commission);
    }
}


//---------------------------------------------------------------------------------
//「兼職員工」繼承「員工」
class PartTimeEmployee extends Employee{
    private int hours;  //兼職時數
	
    //建構元(1)	
    public PartTimeEmployee(String empNo, String empName, char rank, int hours){
        super(empNo, empName, rank);
        setHours(hours);
    }
	
    //建構元(2)
    public PartTimeEmployee(){
        super();
        this.hours=0;
    }
	
    //設定成員值, setter
    public void setHours(int hours){this.hours=hours;}
	
    //取出成員值, getter
    public int getHours(){return hours;}
	
    //全職員工計算薪水的方法, 實作父親的抽象方法
    @Override    
    public int salary(){		
        return (hours*200);
    }
}


//---------------------------------------------------------------------------------
class Main{
    public static void main(String[] args) {
        //一個可放員工物件的串列清啤
        ArrayList employee = new ArrayList();
        
        //將多個「全職員工」物件加入串列清單中
        employee.add(new FullTimeEmployee("A001", "陳小昱", 'A', 450000));
        employee.add(new FullTimeEmployee("A002", "李小閱", 'A', 480000));
        employee.add(new FullTimeEmployee("A003", "廖小昂", 'B', 350000));
        employee.add(new FullTimeEmployee("A004", "謝小齊", 'B', 370000));
        employee.add(new FullTimeEmployee("A005", "藍小謙", 'C', 360000)); 

        //將多個「兼職員工」物件加入串列清單中
        employee.add(new PartTimeEmployee("B001", "王小宇", 'A', 120));
        employee.add(new PartTimeEmployee("B002", "侯小庭", 'A', 185));
        employee.add(new PartTimeEmployee("B003", "許小蘭", 'A', 90));
        employee.add(new PartTimeEmployee("B004", "石小夫", 'B', 125));
        employee.add(new PartTimeEmployee("B005", "陳小瑞", 'C', 160)); 

        //印出資料
        for(int i=0; i<employee.size(); i++){
            printEmployee((Employee)employee.get(i));
        }
    }
	
    //印出員工資料
    public static void printEmployee(Employee emp){
        System.out.println("員工編號:" + emp.getEmpNo());  
        System.out.println("員工姓名:" + emp.getEmpName()); 
        System.out.println("薪水:" + emp.salary());	
        System.out.println("-----------------------");
    }
}
