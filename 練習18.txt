=================================
練習18
=================================

(1)
以下是已完成的「員工」抽象類別及「全職員工」類別,
請另完成「兼職員工」類別,
「Main」測試類別亦已完成, 無需修改.

//------------------------------------------------------------------------------------------
import java.util.ArrayList;

//員工, 抽象類別
abstract class Employee{
    private String branch;    //部門
    private String name;      //姓名
    private char rank;        //職等   
    
    //建構元(1)
    public Employee(String branch, String name, char rank){
    	setBranch(branch);
    	setName(name);
    	setRank(rank);
    }
    
    //建構元(2)
    public Employee(){
    	setBranch(null);
    	setName(null);
    	setRank('\u0000');
    }
    
    //setters
    public void setBranch(String branch){this.branch=branch;}
    public void setName(String name){this.name=name;}
    public void setRank(char rank){this.rank=rank;}
    
    //getters
    public String getBranch(){return this.branch;}
    public String getName(){return this.name;}
    public char getRank(){return this.rank;}
	
    //列印員工資料,抽象方法
    abstract public void print();
}    


//------------------------------------------------------------------------------------------
//全職員工
class FullTimeEmployee extends Employee{
    private int baseSalary;  //底薪
    private int overHours;   //加班時數
    
    //建構元(1)
    public FullTimeEmployee(String branch, String name, char rank, int baseSalary, int overHours){
    	super(branch, name, rank);
    	setBaseSalary(baseSalary);
    	setOverHours(overHours);
    }    
    
    //建構元(2)
    public FullTimeEmployee(){
    	super();
    	setBaseSalary(0);
    	setOverHours(0);
    }
    
    //setters
    public void setBaseSalary(int baseSalary){this.baseSalary=baseSalary;}
    public void setOverHours(int overHours){this.overHours=overHours;}
    
    //getters
    public int getBaseSalary(){return this.baseSalary;}
    public int getOverHours(){return this.overHours;}
	
    //列印員工資料及薪水
    @Override
    public void print(){
    	System.out.println("部門:" + this.getBranch());  
        System.out.println("員工姓名:" + this.getName()); 
        System.out.println("職等:" + this.getRank());
        System.out.println("底薪:" + this.getBaseSalary()); 
        System.out.println("加班時數:" + this.getOverHours()); 
        
        //每小時加班費150元
        System.out.println("薪水:" + (this.getBaseSalary() + 150*this.getOverHours()));
    }
}



//------------------------------------------------------------------------------------------
//兼職員工
class PartTimeEmployee extends Employee{
    private int hours;   //兼職時數
    
    //建構元(1)
    //建構元(2)
    //setters
    //getters	
    //列印員工資料及薪水
}


//------------------------------------------------------------------------------------------
class Main{
    public static void main(String args[]){
        //一個可放員工物件的串列清單
        ArrayList employee = new ArrayList();
        
        //將多個「全職員工」物件加入串列清單中
        employee.add(new FullTimeEmployee("人事部", "楊小婷", 'A', 45000, 12));
        employee.add(new FullTimeEmployee("人事部", "林小佑", 'A', 48000, 10));
        employee.add(new FullTimeEmployee("會計部", "林小瑜", 'B', 35000, 14));
        employee.add(new FullTimeEmployee("會計部", "林小彤", 'B', 37000, 6));
        employee.add(new FullTimeEmployee("運輸部", "黃小翎", 'C', 36000, 12));        
		

        //將多個「兼職員工」物件加入串列清單中
        employee.add(new PartTimeEmployee("人事部", "李小璋", 'A', 120));
        employee.add(new PartTimeEmployee("會計部", "吳小庭", 'A', 185));
        employee.add(new PartTimeEmployee("運輸部", "林小瑾", 'A', 90));
        employee.add(new PartTimeEmployee("運輸部", "朱小靜", 'B', 125));
        employee.add(new PartTimeEmployee("運輸部", "陳小諼", 'C', 160));        
		
        //印出資料
        for(int i=0; i<employee.size(); i++){
            printEmployee((Employee)employee.get(i));
        }
    }
	
    //印出員工資料
    public static void printEmployee(Employee emp){
        emp.print();
        System.out.println("-------------------------");
    }
}


//------------------------------------------------------------------------------------------


請完成「兼職員工」類別, 列印資訊範例如下:

部門:****
員工姓名:******
職等:**
兼職時數:***
薪水:*******
(「A」職等每小時薪水180元; 「B」職等150元; 其他120元.)






(2)
//------------------------------------------------------------------------------------------
import java.util.ArrayList;

//客戶, 抽象類別
abstract class Customer{
    private String phoneNo;     //手機號碼
    private String name;        //姓名
    private int minutes;        //本月通話分鐘數   
    
    //建構元(1)
    public Customer(String phoneNo, String name, int minutes){
    	setPhoneNo(phoneNo);
    	setName(name);
    	setMinutes(minutes);
    }
    
    //建構元(2)
    public Customer(){
    	setPhoneNo(null);
    	setName(null);
    	setMinutes(0);
    }
    
    //setters
    public void setPhoneNo(String phoneNo){this.phoneNo=phoneNo;}
    public void setName(String name){this.name=name;}
    public void setMinutes(int minutes){this.minutes=minutes;}
    
    //getters
    public String getPhoneNo(){return this.phoneNo;}
    public String getName(){return this.name;}
    public int setMinutes(){return this.minutes;}
	
    //列印通話費帳單, 抽象方法
    abstract public void printBill();
}    


//------------------------------------------------------------------------------------------
//月租型客戶
class MonthlyCustomer extends Customer{
    private int baseFee;      //月租費
    private int freeMinutes;  //免費通話分鐘數
    
    //建構元(1)
    //建構元(2)
    //setters
    //getters
    //列印通話費帳單
}



//------------------------------------------------------------------------------------------
//易付卡型客戶
class MeteredCustomer extends Customer{
    //建構元(1)
    //建構元(2)
    //列印通話費帳單
}


//------------------------------------------------------------------------------------------
class Main{
    public static void main(String args[]){
        //一個可放客戶物件的串列清單
        ArrayList customer = new ArrayList();
        
        //將多個「月租型客戶」物件加入串列清單中
        customer.add(new MonthlyCustomer("0911-000-001", "龔小容", 55, 450, 60));
        customer.add(new MonthlyCustomer("0911-000-002", "羅小綾", 135, 450, 60));
        customer.add(new MonthlyCustomer("0911-000-003", "陳小如", 50, 350, 50));
        customer.add(new MonthlyCustomer("0911-000-004", "陳小洋", 80, 350, 50));
        customer.add(new MonthlyCustomer("0911-000-005", "張小慈", 100, 550, 80));        
		

        //將多個「易付卡型客戶」物件加入串列清單中
        customer.add(new MeteredCustomer("0922-000-001", "陳小嘉", 30));
        customer.add(new MeteredCustomer("0922-000-002", "羅小祐", 70));
        customer.add(new MeteredCustomer("0922-000-003", "商小珩", 20));
        customer.add(new MeteredCustomer("0922-000-004", "郭小伶", 15));
        customer.add(new MeteredCustomer("0922-000-005", "蔡小昱", 40));        
		
        //印出資料
        for(int i=0; i<customer.size(); i++){
            print((Customer)customer.get(i));
        }
    }
	
    //印出客戶帳單資料
    public static void print(Customer cus){
        cus.printBill();
        System.out.println("-------------------------");
    }
}
//------------------------------------------------------------------------------------------


請完成「月租型客戶」及「易付卡型客戶」類別, 列印帳單範例如下:

(月租型客戶, 其中每分鐘以5.6元計費, 小數捨去.
超時通話費=每分鐘通話費*超過免費通話分鐘數之時間, 若通話分鐘數未超過免費通話分鐘數, 此項免付.
總費用=月租費+超時通話費.)

手機號碼:***********
姓名:**********
本月通話分鐘數:*****
月租費:*********
免費通話分鐘數:******* 
超時通話費:*******
總費用:*******


(易付卡型客戶, 其中每超過1分鐘以8.7元計費, 小數捨去. 
總費用=每分鐘通話費*本月通話分鐘數)

手機號碼:***********
姓名:**********
本月通話分鐘數:*****
總費用:*******






(3)
//------------------------------------------------------------------------------------------
import java.util.ArrayList;

//產品, 抽象類別
abstract class Product{
    private String name;     //產品名稱
    private int price;       //單價
    
    //建構元(1)
    //建構元(2)
    //setters
    //getters

    //產品利潤, 抽象方法
    abstract public int benefit();
}    


//------------------------------------------------------------------------------------------
//自行生產之產品
class SelfProduct extends Product{
    private String factory;      //生產廠名
    
    //建構元(1)
    //建構元(2)
    //setters
    //getters
    //產品利潤, 抽象方法
}



//------------------------------------------------------------------------------------------
//他公司寄賣之產品
class ConsignProduct extends Product{
    private double commissionRate;   //寄賣傭金比率
	
    //建構元(1)
    //建構元(2)
    //setters
    //getters
    //產品利潤, 抽象方法
}


//------------------------------------------------------------------------------------------
class Main{
    public static void main(String args[]){
        //一個可放客戶物件的串列清單
        ArrayList product = new ArrayList();
        
        //將多個「自行生產之產品」物件加入串列清單中
        product.add(new SelfProduct("手機皮套", 1150, "林口廠"));
        product.add(new SelfProduct("平板塑膠背板", 350, "林口廠"));
        product.add(new SelfProduct("耳機", 1250, "新竹廠"));

        //將多個「他公司寄賣之產品」物件加入串列清單中
        product.add(new ConsignProduct("手機自拍棒", 850, 0.15));
        product.add(new ConsignProduct("手機吊飾", 180, 0.2)); 
		
        //印出資料
        for(int i=0; i<product.size(); i++){
            print((Product)product.get(i));
        }
    }
	
    //印出產品資料
    public static void print(Product product){        
        System.out.println("-------------------------");
    }
}
//------------------------------------------------------------------------------------------


請完成「自行生產之產品」及「他公司寄賣之產品」類別, 
另外, Main類別中的 print(Product product)方法內容也要修改.
列印產品資料範例如下:

(自行生產之產品, 林口廠生產者有35%的利潤, 新竹廠有30%利潤, 小數均捨去)
品名:***********
單價:******
利潤:******


(他公司寄賣之產品, 利潤=單價*寄賣傭金比率)
品名:***********
單價:******
利潤:******
