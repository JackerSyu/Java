(1)
字串的長度是至少為2.
例如:

class Main {
    public static void main(String[] args) {
        String s="a5322121a";
        if(s.length()>2){
          System.out.println("正確");
        }else{
          System.out.println("不正確");
         }
    }
}

a5322121a  (正確)
a          (不正確)
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
class Main {
    public static void main(String[] args) {
        String s="a5322121a";
        if(s.length()>2){
          System.out.println("正確");
        }else{
          System.out.println("不正確");
         }
    }
}

=>
class Main {
    public static void main(String[] args) {
        String s="a5322121a";
		
        if(s.length()>=2){
            System.out.println("正確");
        }else{
            System.out.println("不正確");
        }
    }
}   

   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


(2)
字串的長度是至少為2, 而且(第1碼)與(最後1碼)相同.
例如:

class Main {
    public static void main(String[] args) {
        String s="a5322121b";
        int words=s.length();
        if(words>2 && s.charAt(0)==s.charAt(words-1)){
          System.out.println("正確");
        }else{
          System.out.println("不正確");
         }
    }
}
a5322121a  (正確)
a12321b    (不正確)
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   => 同上, 注意 > 和 >= 不同
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


(3)
字串的長度是5~10位, 而且每一碼都相同.
例如:

aaaaaa  (正確)
ccccccc (正確)
111     (不正確)
123123  (不正確)

class Main {
    public static void main(String[] args) {
        String s="ccccccc";
        int words=s.length();
        int count=0;
        if( 10>=words && words>=5){
          for(int i=0;i<words-1;i++){
            if(s.charAt(i)==s.charAt(i+1)){
              count++;
            }
          }
          if(count!=words-1){
            System.out.println("不正確");
          }else{
            System.out.println("正確");
           }
        }
        else{
          System.out.println("不正確");
        }
    }
}
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


(4)
字串長度為奇數, 內容只能有數字.
例如:
54345   (正確)
42*a2   (不正確)
1234    (不正確)
1421    (不正確)
class Main {
    public static void main(String[] args) {
        String s="55555";
        int words=s.length();
        boolean flag=true;
        if(words==1 || words%2!=0){
          for(int i=0;i<s.length();i++){
          char c=s.charAt(i);
          if(c>'9'  || c<'0' ){
            flag=false; 
          }
          }System.out.println(flag);
        }else{
          System.out.println(flag);
        }   
    } 
}
=======================================================================================
(1)程式沒有明顯問題.
*(2)程式執行結果有誤.
class Main {
    public static void main(String[] args) {
        String s="55555";
        int words=s.length();
        boolean flag=true;
        if(words==1 || words%2!=0){
          for(int i=0;i<s.length();i++){
          char c=s.charAt(i);
          if(c>'9'  || c<'0' ){
            flag=false; 
          }
          }System.out.println(flag);
        }else{
          System.out.println(flag);
        }   
    } 
}

=>
class Main {
    public static void main(String[] args) {
        String s="55555";
        int words=s.length();
        boolean flag=true;

        if(words%2==1){
            for(int i=0; i<s.length(); i++){
                char c=s.charAt(i);
                if(c>'9' || c<'0' ){
                    flag=false; 
                }
            }
        }else{
		    flag=false;
		}
		
		System.out.println(flag);
    } 
}   

(3)程式需要自行測試, 請注意以下的問題.
   (3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


//老師 下面程式是我一開始的想法，結果一直沒有做出來題目要求的，老師如果有空，能否幫我看看?
class Main {
    public static void main(String[] args) {
        String s="55555";
        int words=s.length();
        boolean flag=true;
        if(words==1 || words%2!=0){
          int wrong=0;
          int righttimes=0;
          for(int checks=0;checks<words;checks++){
            for(int number=0;number<10;number++){
              if(s.charAt(checks)!=number){
                wrong++;
                if(wrong==10){
                System.out.println("不正確");
                break;
                }else{
                  continue;
                }
              }else{
                righttimes++;
               }
            }
          }
        if(righttimes==words){ 
          System.out.println("正確");
        }
        }else{
          System.out.println("不正確");
         }
    }
}
=======================================================================================
以上的程式, 除非你告訴為什麼你覺得正確? 那裡覺得正確, 但是執行卻有錯? 否則無法解釋.
=======================================================================================


(5)
字串長度至少為5, 內容只能有數字及小數點.
字串內容可以沒有小數點, 但如果內容有小數點, 只能有1個, 而且小數點之後一定要有其他數字.
例如:
54221     (正確)
543.1     (正確)
5321.     (不正確)
5.3.1     (不正確)

class Main {
    public static void main(String[] args) {
        String s="666666";
        int words=s.length();
        boolean flag=true;
        if(words>=5){
          if(s.charAt(words-1)=='.' || s.charAt(0)=='.'){
            flag=false;
          }
          for(int i=0;i<s.length();i++){
          char c=s.charAt(i);
          if(c=='.'){
            int checkdot=0;
            checkdot++;
            if(checkdot>1){
              flag=false;
            }
          }else if(c>'9'  || c<'0' ){
            flag=false; 
          }
          }System.out.println(flag);
        }else{
          System.out.println(flag);
        }   
    } 
}
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.
s.charAt(0)=='.'
=> 不必檢查   
=======================================================================================