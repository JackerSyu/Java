//(1)
//字串的長度是至少為2.
//例如:
//a5322121a  (正確)
//a          (不正確)
class Main {
    public static void main(String[] args) {
       String a="a";
       boolean b=true;
       if(a.length()<2){
         b=false;
       }
       
       System.out.println(b);
    }
}
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
class Main {
    public static void main(String[] args) {
       String a="a";
       boolean b=true;
       if(a.length()<2){
         b=false;
       }
       
       System.out.println(b);
    }
}

=>
class Main {
    public static void main(String[] args) {
        String a="a";        
		boolean b=true;
		
        if(a.length()<2){
            b=false;
        }
       
        System.out.println(b);
    }
}   
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


//(2)
//字串的長度是至少為2, 而且(第1碼)與(最後1碼)相同.
//例如:
//a5322121a  (正確)
//a12321b    (不正確)
class Main {
    public static void main(String[] args) {
       String a="a5322121";
       boolean b=false;
       if(a.length()>=2 && a.charAt(0)==a.charAt(a.length()-1)){
         b=true;
       }
       
       System.out.println(b);
    }
}
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


// (3)
// 字串的長度是5~10位, 而且每一碼都相同.
// 例如:
// aaaaaa  (正確)
// ccccccc (正確)
// 111     (不正確)
// 123123  (不正確)
class Main {
    public static void main(String[] args) {
       String a="1111111";
       boolean b=true;
       if(a.length()<5||a.length()>10){
         b=false;
       }
       for(int i=0;i<a.length()-1;i++){
          if(a.charAt(i)!=a.charAt(i+1)){
            b=false;
          }
       }
       System.out.println(b);
    }
}
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.
       for(int i=0;i<a.length()-1;i++){
          if(a.charAt(i)!=a.charAt(i+1)){
            b=false;
          }
       }
=>
       for(int i=0;i<a.length()-1;i++){
          if(a.charAt(i)!=a.charAt(i+1)){
             b=false;
		     break;
          }
       }	   
=======================================================================================


// (4)
// 字串長度為奇數, 內容只能有數字.
// 例如:
// 54345   (正確)
// 42*a2   (不正確)
// 1234    (不正確)
// 1421    (不正確)
class Main {
    public static void main(String[] args) {
       String a="54345";
       boolean b=true;
       if(a.length()%2==1){
         for (int i=0;i<a.length();i++){
          char c=a.charAt(i);
          if(c>'9' || c<'0'){
            b=false;
            break;
          }
         }
       }else{b=false;} 
       System.out.println(b);
    }
}
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


// (5)
// 字串長度至少為5, 內容只能有數字及小數點.
// 字串內容可以沒有小數點, 但如果內容有小數點, 只能有1個, 而且小數點之後一定要有其他數字.
// 例如:
// 54221     (正確)
// 543.1     (正確)
// 5321.     (不正確)
// 5.3.1     (不正確)
class Main {
    public static void main(String[] args) {
       String a="5.3.1";
       boolean b=false;
       int cnt=0;
       for (int i=0;i<a.length();i++){
        char c=a.charAt(i);
        if(c=='.')
        cnt++;
       }
       if(a.length()>=5&&cnt<2&&a.charAt(a.length()-1)!='.'){
         b=true;
       }
       System.out.println(b);
    }
}
=======================================================================================
(1)程式沒有明顯問題.
*(2)程式執行結果有誤.
=> 試試 String a="512a3.1";

(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================