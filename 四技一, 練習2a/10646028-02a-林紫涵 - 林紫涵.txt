=================================
練習02a 字串的處理
=================================
測試以下的字串是否符合條件:

(1)
字串的長度是至少為2.
例如:
a5322121a  (正確)
a          (不正確)

class Main {
    public static void main(String[] args) {
//--------------------------------------------
        String s="A";
        int test_s=s.length();
//--------------------------------------------        
        if(test_s>=2){
          System.out.println("正確");  
        }else{
          System.out.println("不正確");
        }
    }
}
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
class Main {
    public static void main(String[] args) {
//--------------------------------------------
        String s="A";
        int test_s=s.length();
//--------------------------------------------        
        if(test_s>=2){
          System.out.println("正確");  
        }else{
          System.out.println("不正確");
        }
    }
}
=>
class Main {
    public static void main(String[] args) {
        //-------------------------
        String s="A";
        int test_s=s.length();
		
        //-------------------------        
        if(test_s>=2){
            System.out.println("正確");  
        }else{
            System.out.println("不正確");
        }
    }
}   
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


(2)
字串的長度是至少為2, 而且(第1碼)與(最後1碼)相同.
例如:
a5322121a  (正確)
a12321b    (不正確)

class Main {
    public static void main(String[] args) {
//--------------------------------------------
        String s="AA585A";
        int test_s=s.length();
        char s1=s.charAt(0);
        char s2=s.charAt(test_s-1);
//--------------------------------------------        
        if(test_s>=2 && s1==s2){
          System.out.println("正確");  
        }else{
          System.out.println("不正確");
        }
    }
}
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.

=> 減少變數使用:

class Main {
    public static void main(String[] args) {
        String s="AA585A";
       
        if(s.length()>=2 && s.charAt(0)==s.charAt(s.length()-1)){
            System.out.println("正確");  
        }else{
            System.out.println("不正確");
        }
    }
}   
   
=======================================================================================


(3)
字串的長度是5~10位, 而且每一碼都相同.
例如:
aaaaaa  (正確)
ccccccc (正確)
111     (不正確)
123123  (不正確)

class Main {
    public static void main(String[] args) {
//--------------------------------------------
        String s="rrrrrrrrrrr";
        int test_s=s.length();
        char s1=s.charAt(0);
        char s2=s.charAt(test_s-1);
        int sum =0;
//--------------------------------------------        
        if(test_s>4 && test_s<11){
           for (int i=0;i<test_s-2;i++){
                 char s4 =s.charAt(i);
                 char s5 =s.charAt(i+1);
                      if(s4==s5){
                         sum++;
                      }
            }
            if (sum==test_s-2){
               System.out.println("正確");
            }else{
               System.out.println("不正確");
            }
        }else{
          System.out.println("不正確");
        }
    }
}
=======================================================================================
(1)程式沒有明顯問題.
(2)程式執行結果有誤.
*(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.   
=> 減少變數使用, 另:

    if(test_s>4 && test_s<11){
=>  if(test_s>=5 && test_s<=10){
=======================================================================================


(4)
字串長度為奇數, 內容只能有數字.
例如:
54345   (正確)
42*a2   (不正確)
1234    (不正確)
1421    (不正確)

class Main {
    public static void main(String[] args) {
//--------------------------------------------
        String s ="1234567";
        int test_s=s.length();
        int sum =0;
//--------------------------------------------        
        if (test_s>4 && test_s <11){
            if(test_s%2==0){
               System.out.println("不正確");
            }else{
                for (int i =0 ; i<test_s ;i++){
                  char c =s.charAt(i);
                  if(c>9||c<0){
                    sum++;
                  }else{
                    System.out.println("不正確");
                  }
                }
            }  
            if(sum==test_s){
              System.out.println("正確");
            } 
        }else{
          System.out.println("不正確");
        }
    }
}
=======================================================================================
*(1)程式沒有明顯問題.
=> 內縮距離不一致
(2)程式執行結果有誤.
(3)程式需要自行測試, 請注意以下的問題.
   (3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   (3-8)程式撰寫其他建議.
=======================================================================================


(5)
字串長度至少為5, 內容只能有數字及小數點.
字串內容可以沒有小數點, 但如果內容有小數點, 只能有1個, 而且小數點之後一定要有其他數字.
例如:
54221     (正確)
543.1     (正確)
5321.     (不正確)
5.3.1     (不正確)

class Main {
    public static void main(String[] args) {
//--------------------------------------------
        String s ="12345";
        int test_s=s.length();
        int sum =0;
        int sum1 =0;
//--------------------------------------------檢查長度&是否為數字 
        if(test_s>=5){
          for (int i=0 ; i<test_s ;i++){
            char c1 = s.charAt(i);
            if(c1>9 && c1<0 ){
              sum1++;
            }
          }
//-------------------------------------------------    
          if (sum1>=1){
            System.out.println("不正確");
          }else{
             for(int i=0 ; i<test_s ; i++){
              char c =s.charAt(i);
                if (c=='.'){
                 sum++;
               }
              }
              if(sum==1||sum==0){
                System.out.println("正確");
              }else{
                System.out.println("不正確");
              }
            }
//--------------------------------------------          
        }
        else{
          System.out.println("不正確");
        }
//--------------------------------------------        
    }
}
=======================================================================================
(1)程式沒有明顯問題.
*(2)程式執行結果有誤.
=> 試試  String s ="12345";

(3)程式需要自行測試, 請注意以下的問題.
   *(3-1)程式格式有誤: 沒有階層式內縮, 內縮距離不足, 內縮距離不一致, 或無意義的空行.
   (3-2)不容易閱讀: 具有特定意義的程式段落缺少分隔或註解, 或是同一行中擠進太多內容.                     
   (3-3)變數命名不適合: 未給予具有特別意義的變數符合其意義的名稱.
   (3-4)誤用常數: 程式中重覆出現特定數值, 或使用的常數與其他變數過度相依.
   (3-5)過於複雜的設計: 很明顯有更簡單的設計方式可以取代現有設計.
   (3-6)重覆或過於相似的程式段落: 程式中存在多個相同或相似段落, 明顯可整合但未整合.
   (3-7)沒有意義的指令: 存在不影響程式執行結果, 但又會被執行的程式敘述.
   *(3-8)程式撰寫其他建議.
   if(sum==1||sum==0){
=> if(sum<=1){   
=======================================================================================